import json

import telebot
from telebot import types

from yf_utils.yf_utils import TickerInfo

CONFIG_PATH = "bot_config.json"


if __name__ == "__main__":
    with open(CONFIG_PATH) as f:
        config = json.load(f)

    TOKEN = config["token"]

    START_MSG = """–ü—Ä–∏–≤–µ—Ç, {}! 

    –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ä–∂–µ–≤—ã—Ö –∫–æ—Ç–∏—Ä–æ–≤–∫–∞—Ö! üìàüöÄüí∏

    –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é ‚Äî –æ—Ç–ø—Ä–∞–≤—å /help"""

    HELP_MSG = """
    –Ø –º–æ–≥—É –≤—ã–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É —Ç–µ–±—è —Ç–∏–∫–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏—è Apple –∏–º–µ–µ—Ç —Ç–∏–∫–µ—Ä AAPL).

    –¢–∏–∫–µ—Ä—ã –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Yahoo Finance (https://finance.yahoo.com/most-active/)

    –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∫–∏–º-–ª–∏–±–æ —Ç–∏–∫–µ—Ä–æ–º ‚Äî –æ—Ç–ø—Ä–∞–≤—å /put_ticker
    """

    bot = telebot.TeleBot(TOKEN)

    ticker = ""
    ti = None

    @bot.message_handler(content_types=["text"])
    def start(message):
        if message.text == "/start":
            bot.send_message(
                message.from_user.id, START_MSG.format(message.from_user.username)
            )
        elif message.text == "/help":
            bot.send_message(message.from_user.id, HELP_MSG)
        elif message.text == "/put_ticker":
            bot.send_message(
                message.from_user.id, "–í–≤–µ–¥–∏ –∫–æ–¥ —Ç–∏–∫–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä AAPL –∏–ª–∏ TSLA:"
            )
            bot.register_next_step_handler(message, get_ticker)
        else:
            bot.send_message(
                message.from_user.id,
                "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû.\n–ù–∞–ø–∏—à–∏ /help –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏",
            )

    def get_ticker(message):
        global ticker
        global ti

        ticker = str(message.text).strip().upper()
        ti = TickerInfo(ticker)
        ticker_info = ti.check_ticker()
        if ticker_info:
            bot.send_message(
                message.from_user.id,
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É `{ticker}` –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {ticker_info['longName']}",
            )
            get_ticker_actiion(message)
            # bot.register_next_step_handler(message, get_ticker_actiion)
        else:
            bot.send_message(
                message.from_user.id,
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É `{ticker}` –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏.\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /put_ticker",
            )

    def get_ticker_actiion(message):

        keyboard = types.InlineKeyboardMarkup()

        key_basic_info = types.InlineKeyboardButton(
            text="–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            callback_data="basic_info",
        )
        keyboard.add(key_basic_info)

        key_today_report = types.InlineKeyboardButton(
            text="–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ç–æ—Ä–≥–∞–º", callback_data="last_market_report"
        )
        keyboard.add(key_today_report)

        key_last_month_history = types.InlineKeyboardButton(
            text="–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", callback_data="last_month_history"
        )
        keyboard.add(key_last_month_history)

        key_last_6month_history = types.InlineKeyboardButton(
            text="–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏e 6 –º–µ—Å—è—Ü–µ–≤",
            callback_data="last_6month_history",
        )
        keyboard.add(key_last_6month_history)

        bot.send_message(
            message.from_user.id,
            f"–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ {ticker}",
            reply_markup=keyboard,
        )

    @bot.callback_query_handler(func=lambda call: True)
    def callback_worker(call):
        if call.data == "basic_info":
            s = ti.get_basic_info()
            bot.send_message(
                call.message.chat.id,
                "*–û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è* üß∞\n\n".upper() + s,
                parse_mode="Markdown",
            )
        elif call.data == "last_market_report":
            s = ti.get_fresh_report()
            bot.send_message(
                call.message.chat.id,
                "*–°–≤–µ–∂–∞–π—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö* üìà\n\n".upper() + s,
                parse_mode="Markdown",
            )
        elif call.data == "last_month_history":
            ti.get_history_data({"days": 31})
            img = open(ti.img_path, "rb")
            bot.send_message(
                call.message.chat.id,
                f"–í–æ—Ç –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞–ª–∏—Å—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –±—É–º–∞–≥–∏ {ti.info['longName']} üöÄüöÄüöÄ",
            )
            bot.send_photo(call.message.chat.id, img)
        elif call.data == "last_6month_history":
            ti.get_history_data({"days": 366 // 2})
            img = open(ti.img_path, "rb")
            bot.send_message(
                call.message.chat.id,
                f"–í–æ—Ç –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞ –±—É–º–∞–≥–∏ {ti.info['longName']} üöÄüöÄüöÄ",
            )
            bot.send_photo(call.message.chat.id, img)

    bot.infinity_polling(timeout=10, long_polling_timeout=5)
